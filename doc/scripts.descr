1. add_geo_to_addrs.sh:

	This script is used to add lat/lng to either the canonical src or dst addresses in a query-line file.  If the
	lat/lng for the address was found, the result is written to stdout; if not the error and possibly some context
	is written to stderr.

	usage:

		./add_geo_to_addrs.sh [ -help ] [ -c conf-file ] -at { src | dst } [ query-line-file ]

	arguments:

		-help		-- print the usage message. Default: false.
		-c conf-file	-- This file contains several tables that are used to canonicalize addresses.  Tables
				-- include mappings like St -> Street and PA -> Palo Alto.  Default: $DM_HOME/etc/address.info.
		-at { src | dst	}
				-- For historical reasons, query-line files contain both the src and dst address of the 
				-- delivery, but only one has been canonicalized.  Use -at src to specify that the src
				-- addresses are canonical or -at dst to specify that the dst addresses are canonical.
				-- Default: none
		query-line-file
				-- A file containing canonicalized src or dst addresses.  Default: stdin.  To resolve addresses in
				-- more than one file use: cat file-1 ... | add_geo_to_addrs.sh ...

	example:

		If the file addrs.nogeo.20170101.tsv contains canonicalized src addresses that require lat/lng information, use
		this command:

			add_geo_to_addrs.sh -at src addrs.nogeo.20170101.tsv > addrs.geo.20170101.tsv 2> addrs.geo.20170101.errs

2. add_new_addrs.sh:

	This script adds new addresses to the sqlite3 db, dd_maps.db.  Each new address is assigned an initial a_stat of "G"
	an  initial as_reason of "new".

	usage:

		./add_new_addrs.sh [ -help ] runs-file_1 ...

	arguments:

		-help		-- print the usage message. Default false.
		runs-files	-- one or more runs-file that contains new addresses.  Default: none

	example:

		If new jobs have been added to the runs file runs.20170101.tsv, this command will find any new addresses and
		insert them into the sqlite3 db dd_maps.db.

			./add_new_addrs.sh $DD_DATA/runs.20170101.tsv

3. cfg_to_json.sh:

	This script converts key = value config files to json that can be used by d3 to configure the scales on the
	maps.

	usage:

		./cfg_to_json.sh [ -help ] [ config-file ]

	arguments:

		-help		-- print the usage messages. Default: false.
		config-file	-- Simple key = value config files.  Default: stdin.

	example:

		This command converts the key/value pairs in src.cfg to json.
	
			./cfg_to_json.sh src.cfg > src_cfg.json

4. color_map_data.sh:

	This script converts "mapped" address values to color and/or marker sizes using the scale information in a config
	file.  If requested, append the color and/or size extrema and bin information (count, %) to a "stats" file.

	usage:

		./color_map_data.sh [ -help ] -c conf-file [ -stats stats-file ] [ map-data-file ]

	arguments:

		-help		-- print the usage message. Default: false.
		-c conf-file	-- get color and other graphic parameters from config file conf-file.  Default: none.
		-stats stats-file
				-- If present, append graphic value limits and bin information to this file.
		map-data-file	-- A mapped address file.  Default: stdin.

	example:

		./color_map_data -c src.cfg -stats /tmp/stats.$$ src_by_date.tsv > src_colored_by_date.tsv

5. delete_unused_addrs.sh:

	This script deletes addresses from the sqlite3 dd_maps.db database.  Sometimes addresses initially entered into
	this db are incorrecct -- wrong town or street type.  If the original address can be corrected in the original data,
	the corrected address is entered and updated with its geo, and the original incorrrect address removed, keeping the
	addresses in the db in sync with the original data.

	usage:
		./delete_unused_addrs.sh [ -help ] unused-addr-file

	arguments:

		-help		-- print usage message. Default: false.
		unused-addr-file
				-- file containing addresses to to delete. One address/line.  Default: none.

	example:

	If the file unused.addrs contains addresses that are no longer in any runs file, use this command to remove them
	from the db:

		./delete_unused_addrs.sh unused.addrs

6. find_geo_aliases.sh:

	This script is used to find addresses that resolve to the lat/lng.  In some cases this is fine because my
	opencagedata.com query can't resolve the addresses, say 2 floors in the same building.  But in other cases, the
	identical lat/lng show that the same address was entered in two or more different ways, something that must be
	fixed.

	usage:

		./find_geo_aliases.sh [ -help ] (no options or arguments)

	arguments:

		-help		-- print usage message. Default: false.

	example:

		Use this command to find (lexically) distinct addresses with the same lat/lng:

			./find_geo_aliases.sh > geo.aliases

7. find_qry_addr_aliases.sh:

	This script find lexically distinct addresses that produce the same canonicalized address.  This generally
	happens because address canonicalization ignores street qualifiers.  So 123 Main St. and 123 Main St., Apt. 2
	are both reduced to 123 Main St.  In some cases, more complete canonicalization might help, but in other
	cases, where the original addresses differ only at the floor level inside of a building, those addresses
	will always be the same.

	usage:

		./find_qry_addr_aliases.sh [ -help ] (no options or arguments)

	arguments:

		-help		-- print usage message. Default: false.

	example:

		Use this command to find (lexically) distinct addresses that have the same canonical address.

			./find_qry_addr_aliases.sh > qry.aliases

8. find_unused_addrs_in_runs.sh:

	This script takes a file of addresses and a list of runs-files and writes out those addresses that are not
	used in any of those runs-files.  It is used to find addresses in the sqlite3 db dd_maps.db that have been
	corrected, so they can then be deleted insuring that the db stays in sync with the raw data.

	usage:

		./find_unused_addrs_in_runs.sh [ -help ] -a addrs-file [ runs-file ]

	arguments:

		-help		-- print usage message. Default: false.
		-a addrs-file	-- addrs-file contains all raw addresses in the sqlite3 db dd_maps.db.
		runs-file	-- Runs file. Default: stdin.

	example:

		If the file addrs.tsv contains all addresses in the dd_maps.db, then use this command to find 
		and write any address in addrs.tsv that is not used in any runs-file.

			cat $DD_DATA/runs*.tsv | ./find_unused_addrs_in_runs.sh -a addrs.tsv > unused.addrs

9. get_addrs_from_runs.sh:

	usage:
		./get_addrs_from_runs.sh [ -help ] [ -c addr-info-file ] -at { src | dst } [ runs-file ]

	arguments:

		-help		-- print usage message. Default: false.
		-c addr-info-file
				-- use the tables in addr-info-file to canonicalize the addresses. Default:
				-- $DM_HOME/etc/address.info.
		-at { src | dst }
				-- runs files contain all delivery information.  And every delivery has both
				-- a src and a dst address.  Use -at src to get src address information and
				-- -at dst to get dst address information.  Default: none.
		runs-file	-- the runs-file that will provide the addresses.  To get addresses from 
				-- more than one runs use cat runs-file ... | ./get_addrs_from_runs.sh ...

	example:

		To extract dst addresses from runs.20170101.tsv use:

			./get_addrs_from_runs.sh -at dst runs.20170101.tsv > dst.addrs

		To extract src addresses from all runs files in $DD_DATA, use

			cat $DD_DATA/runs*.tsv | ./get_addrs_from_runs.sh -at src

10. get_freshness_info.sh:

	This script computes the freshness of the addresses in the specified runs-file(s).  Freshness is 
	the amount time that has past since an address was either a src or a dst.

	usage:

		./get_freshness_info.sh [ -help ] -at { src | dst } -ts { day | week | month* } [ runs-file ]

	arguments:

		-help		-- print usage message. Default: false.
		-at { src | dst }
				-- Use -at src to gather src freshness or -at dst to get dst freshness infomation.
				-- Default: none.
		-ts { day | week | month }
				-- Select the time step between freshness calculations.  Default: month.  However,
				-- week might be better.
		runs-file	-- The source of the addresses.  To compute freshness on more than one runs-file,
				-- use cat runs-files | ./get_freshness -at src 

	example:

		Use this command to gather weekly dst freshness information for all addresses in $DD_DATA:

			cat $DD_DATA/runs*.tsv | ./get_freshness -at dst -ts week > dst.freshness.tsv

11. get_geo_for_addrs.sh:

	This script queries opencagedata.com to add lat/lng to either a single address or a list of addresses
	in a file.  If query is successful the result is written to stdout as a geo-line-file; if the query
	fails the result is written to stderr as a geo-error-file.

	usage:

		./get_geo_for_addrs.sh [ -help ] { -a address | [ address-file ] }

	arguments:

		-help		-- print ussage message. Default: false.
		-a addr		-- get geo information for addr and exit. Default: false.
		address-file	-- get geo information for addresses in address-file. Default: stdin.

	example:

		Uses these command to look an address or all addresses in a file:

			./get_geo_for_addrs.sh -a "Crepevine, 367 University Ave., PA"

			./get_geo_for_addrs.sh addrs.tsv > addrs.geo 2> addrs.err


12. get_geo_for_new_db_addrs.sh:

	This scripts selects all addresses with a_stat = "G" and as_reason = "new" and queries 
	opencagedata.com for their lat/lng. For each successful query the result is written to stdout
	as a line in a geo-line-file; for each failed query a line is written to stderr as a geo-error-file.

	usage:

		./get_geo_for_new_db_addrs.sh [ -help ] geo-dir

	arguments:

		-help		-- print usage message. Default false.
		geo-dir		-- The directory that will hold the results as 
				-- 	good: addrs.YYYYmmddTHHMMSS.tsv and
				--	bad:  addrs.YYYYmmddTHHMMSS.err

	example:

		./get_geo_for_new_db_addrs.sh geo

13. get_latlong.sh:

	This script makes the call to opencagedata.com to get lat/lng for the canonical-address.  The result is
	returned as json with each suggested match an element in an array.  The script unpacks this array into
	lines of a tsv file for subsequent processing.

	usage:

		./get_latlong.sh [ -help ] [ -limit N ] canonical-address

	arguments:

		-help		-- prints usage message.  Default: false.
		-limit N	-- return up to N suggested matches.  Default: use opencagesdata.com's default of 10.
		canonical-address
				-- the address to get lat/lng.

	example:

		This command gets the lat/lng for 367 University Avenue, Palo Alto, CA

			./get_latlong "367 University Avenue, Palo Alto, CA"

14. get_new_sources.sh:

	This script creates a tsv file of the number of new sources visited for each shift.

	usage:

		./get_new_sources.sh [ -help ] [ runs-file ]

	arguments:

		-help		-- print usage message. Default: false.
		runs-file	-- The runs-file of interest.  For more than one runs-file use 
				-- cat runs-file ... | ./get_new_sources.sh

	example:

		This command will create a tsv file of new sources/dash for all runs-files in $DD_HOME:

			cat $DD_HOME/runs*.tsv | ./get_new_sources.sh > new_src.tsv

15. get_pay_rates.sh:

	This script creates a tsv file of 3 pay rates: dollars/hour, dollars/dash and dashes/hour

	usage:

		./get_pay_rates.sh [ -help ] [ payments-flle ]

	arguments:

		-help		-- print usage message. Default: false.
		payments-file	-- tsv file of weekly stats: amount, hours, dashes and date

	example:

		This command will create a tsv file of pay rates from a payments file

			./get_pay_rates.sh payments.tsv > p.tsv

16. insert_new_addrs.sh:

	This script insert new addresses along with the parsed query address and a_type into 
	the addresses table of the sqlite3 db, dd_maps.db.  Fields a_stat and as_reason are
	set to 'G' and 'new'.

	usage:

		./insert_new_addrs.sh [ -help ] -at { src | dst } [ query-line-file ]

	arguments:

		-help		-- print usage message. Default: false.
		-at { src | dst }
				-- Due to historical reasons query-line-files contain both the 
				-- src and dst address of each delivery.  However only one of these
				-- addresses has been parsed.  Use -at src for parse src addresses 
				-- and -at dst for parsed dst addresses.  Default: none.
		query-line-file
				-- one or more lines of parsed addresses.

	example:

		If the file addrs.nogeo.20170101.tsv contains canonicalized src addresses that require lat/lng information, use
		this command to insert them into the addresses table:

			./insert_new_addrs.sh -at src addrs.nogeo.20170101.tsv

17. insert_new_dashes.sh:

	This script inserts new dash data into the dashes table of the sqlite3 db dd_maps.db.  This data
	consists of the dash's start and end times, the number of dashes, then number of hours (from
	doordash) and pay details: base, tips, extra.  

	usage:

		./insert_new_dashes.sh [ -help ] [ breakdown-of-pay-file ]

	arguments:

		-help		-- print usage message. Default: false.
		breakdown-of-pay-file
				--

	example:

		If the raw dash data is in the file bdp.tsv, this command will new values to thedb:

			./insert_new_dashes dbp.tsv

18. insert_new_jobs.sh:

	This command will (if I ever use it) insert new jobs (ie single deliveries) into the jobs table
	of the sqlite3 db dd_maps.db.

	NOTE: This script is still inactive.  The jobs tables contains foreign keys to entries in the 
	addresses and dashes tables and while this is the correct thing to do, foreign key support in 
	sqlite3 is off by default, so I need make sure I enable it everytime I use this table.  Also,
	I'm not exactly sure what I'd do with the jobs table so ...

	usage:

		usage: ./insert_new_jobs.sh [ -help ] [ runs-file ]

	arguments:

		-help		-- print usage message. Default: false.
		runs-file	--

	example:

		If the runs-file runs.20170101.tsv contains new jobs, this command will insert them
		into the jobs table:

			./insert_new_jobs. runs.20170101.tsv

19. make_geojson.sh:

	This script takes an address-geo-file which is a set of addresses with lat/lon that have been prependded with
	marker color and size information and converts this file to geojson that can displayed on a map.

	usage:

		usage: ./make_geojson.sh [ -help ] -c conf-file -gt { points | lines } [ -t title ] [ address-data-file ]

	arguments:

		-help		-- print usage message. Default false.
		-c conf-file	-- json conf-file that contains information about the data and marker colors and size
				-- that can be converted to d3.json map legends. Default: none.
		-gt { points | lines }
				-- specifiies whether the input file contains points (-gt points) or lines (-gt lines).
				-- The input must be one or the other.  Default: none.
		-t title	-- If present, add it as the value of metadata.title in the geojson. Default: none.
		address-data-file
				-- A file of points or lines with size and color information for then endpoints.
				-- Default: stdin.

	example:

		If the file src.17.tsv contains mapping data about a set of source points, then this command will
		convert that file into json:

			./make_geojson -c src_cfg.json -gt points -t "Sources 2017-01" src.17.tsv > src.17.json

20. map_addrs.sh:p

	This script converts the addresses in a geo-line file to geojson points that can be displayed using
	map_viewer.html.  This makes it easy to determined if the returned addresses are correct.

	usage:

		./map_addrs.sh [ -help ] -at { src | dst } [ geo-line-file ]

	arguments:

		-help		-- print usage message. Default: false.
		-at { src | dst }
				-- Use -at src to use source addresses or -at dst to use dets. addresses.  Default: none.
		geo-lins-file	-- A file containing found addresses returned by get_geo_for_addrs.sh.  Default: stdin.

	example:

		If the file addrs.tsv contains addresses found by opencagedata.com, then this command will convert those
		addresses to geojson

			./map_addrs.sh addrs.tsv > addrs.json
	

21. map_by_dash_rate.sh:p

	This script computes an average pay/dash for each src or dst address in the input runs-file.  The average is 
	based on the break down of pay that doordash provides after each shift which for this fucntion is pay/shift
	and jobs/shift which gives and average pay/job  = (pay/shift)/(jobs/shift).  This assigns equal values of
	pay/job to each job in a shift, but average of many shifts each with a different mix of src or dst addresses
	and some trends do emerge, in that some srcs are consistantly above or below the global average.

	usage:

		./map_by_dash_rate.sh [ -help ] -d dashes-file -a addr-file -at { src | dst } [ -stats stats-file ] [ runs-file ]

	arguments:

		-help		-- print usage message. Default: false.
		-d dashes-file	-- This file contains the pay and job details for each shift.  Default: none.
		-a addr-file	-- A tsv file of address, lng, lat selected from the sqlite db dd_maps.db.  Default: none.
		-at { src | dst }
				-- Use -at src to use source addresses or -at dst to use dest. addresses. Default: none.
		-stats stats-file
				-- If present write various stats to it so they can be used to color and size the 
				-- markers on the map.  Default: none.
		runs-file	-- A file containing the jobs whose addresses are to be analyzed.  Default: stdin.

	example:

		If the file addrs.tsv contains addrs + lng/lat data and bdp.tsv contains the pay details, then this
		command will compute the average pay for source addrs for all jobs in the directory $DD_HOME.  Stats
		will be appended to stats.file:

			cat $DD_HOME/runs*.tsv | ./map_by_dash_rate.sh -d dbp.tsv -a addrs.tsv -at src -stats stats.file > dr.tsv

22. map_by_date.sh:

	This script computes the freshness (ie time since most recent pick-up or delivery) and total visits to/from each address
	in the input runs-file.  Time since last activity is shown by marker color and number of visits by marker size.

	usage:

		./map_by_date.sh [ -help ] -a addr-file -at { src | dst } [ -cnt ] [ -rev ] [ -unit { day | week | month } ] [ -stats stats-file ] [ runs-file ]

	arguments:

		-help		-- print usage message. Default: false.
		-a addr-file	-- A tsv file of address, lng, lat selected from the sqlite db dd_maps.db. Default: none.
		-at { src | dst }
				-- Use -at src to work on src addresses; use -at dst to work on dest. addresses. Default: none.
		-cnt		-- Count the number of visits.  Default: false.
		-rev		-- Reverse the time to last-date - date of job.  Default: false.
		-unit { day | week | month }
				-- The frequency of freshness values.  Default: month.
		-stats stats-file
				-- If present, write various stats to it so they can be used to color and size the 
				-- markers on the map.  Default none.
		runs-file	-- A file containing the jobs whose addresses are to be analyzed.  Default: stdin.

	example:

		If the file addres.tsv contains addrs + lng/lat data, this this command will compute the weekly freshness data for
		all jobs in $DD_HOME as weeks since last action.  The -cnt will write the total visits to date for each point.
		Stats will be appended to stats.file:

			cat $DD_HOME/runs*.ts | ./map_by_date -a addrs.tsv -at src -cnt -rev -unit week -stats stats.file > sf.tsv

23. plot_all_stats.sh:

	This script creates a single pdf with the four plots: pay rates, new sources, src and dst freshness.

	usage:

		./plot_all_stats.sh [ -help ] data-dir

	arguments:

		-help		-- print usage message. Default: false.
		data-dir	-- data containing the runs-files. Default: none.

	example:

		If the runs files are in $DD_HOME, then this command will create a single page pdf with 
		four plots:  The output will be left in $DD_HOME as allStats.YYYY-MM-DD.pdf.

			./plot_all_stats.sh $DD_HOME.

24. plot_freshness_info.sh:

	This scripts plots address freshness data.  Here freshness is varying percents of addresses that
	have been active in the last 1, 2, 4, 8, 12, 26, 52 and 52+ weeks.

	usage:

		./plot_freshness_info.sh [ -help ] -at { src | dst } freshness-file

	arguments:

		-help		-- print usage message. Default false.
		-at { src | dst }
				-- Use -at src to indicate this plot contains src freshness; use -at dst
				-- to indicate that this plot contains dst freshness.  Default: none.
		site-evolution-file
				-- A tsv file containing either src or dst freshness data.  Default: none. 

	example:

		If the file sf.tsv contains src freshness data, this command will plot it, writing the 
		results as PDF to srcFreshness.YYYY-MM-DD.pdf in the current directory.

			./plot_freshness -at src sf.tsv

25. plot_pay_rates.sh:

	This script plots pay rate data.

	usage:

		./plot_pay_rates.sh [ -help ] pay-summary-file

	arguments:

		-help		-- print usage message. Default false.
		pay-summary-file
				-- A tsv file contaning pay rate data. Default: none.

	example:

		If the file p.tsv contains pay data, this command will plot it writing the results
		as PDF to payRates.YYYY-MM-DD.pdf.

			./plot_pay_rates.sh p.tsv

26. plot_src_info.sh:

	This script plots new source data.

	usage:

		./plot_src_info.sh [ -help ] source-file

	arguments:

		-help		-- print usage message. Default false.
		source-file	-- A tsv file containing source data. Default: none.

	example:

		IF the file s.tsv contains source data, this command will plot it writing the
		results as PDF to newSources.YYYY-MM-DD.pdf

			./plot_src_info.sh s.tsv

27. update_addrs_with_geo_errors.sh:

	This script updates the addresses in the sqlite3 db dd_maps.db with the results of failed
	requests for geo location.

	usage:

		./update_addrs_with_geo_errors.sh [ -help ] [ addr-geo-error-file ]

	arguments:

		-help		-- print usage message. Default: false.
		addr-geo-error-file
				-- file containing addresses that could not be found by opencagedata.com
				-- Default: stdin.

	example:

		If the file addrs.20170111T092317.err contains failed geolocation results for a set of
		addresses (src, dst does not matter here), this command will update the addresses in the
		db with the new data

			./update_addrs_with_geo_errors.sh addrs.20170111T092317.err

28. update_addrs_with_geo_loc.sh:

	This script is used to update addresses either w/o geo information or corrected geo information.

	usage:

		./update_addrs_with_geo_loc.sh [ -help ] -at { src | dst } [ addr-geo-file ]

	arguments:

		-help		-- print usage message. Default: false.
		-at { src | dst }
				-- Due to historical reason, query-file, contain both the src and dst addresses 
				-- for a job, but only one has been canonicalized and will be submit for geo
				-- location. Which means that results files also contain both src and dst addresses,
				-- but, again only one was geo located.  Use -at src if geo location was for
				-- src addresses, or -at dst for dst addresses.  Default: none.
		addr-geo-file	-- file containing geo data returned by opencagedata.com for successful
				-- queries: reply address, lat, long.  Default: stdin.

	example:

		If the file addrs.20170111T092317.tsv contains successful geolocation results for a set of
		src addresses, then this command will update the addresses in the db with the new data:

			./update_addrs_with_loc_info.sh -at src addrs.20170111T092317.tsv
