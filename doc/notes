All files are in $DM_HOME.  if DM_HOME is not defined, the script logs a message to stderr that DM_HOME is not define
and exits with status = 1.

scripts/add_geo_addresses.sh:

	This script is used to add lat/lng (if possible) to either the src or dst addresses in a canonicalized address file.
	If the lat/lng for the address was found, the result is written to stdout; if not the error and possibly some context
	is written to stderr.

	usage:

		./add_geo_to_addresses.sh [ -help ] [ -c conf-file ] -at { src | dst } [ extracted-address-file ]

	arguments:

		-help		-- print the usage message. Default: false.
		-c conf-file	-- This file contains several tables that are used to canonicalize addresses.  Tables
				-- include mappings like St -> Street and PA -> Palo Alto.  Default: $DM_HOME/etc/street.info.
		-at { src | dst	}
				-- Select the address type. The input file contains both the source and destination addresses
				-- for each dash.  Use -at src to work on source addresses or -at dst to work on destination
				-- addresses.  Default: none.
		extracted-address-file
				-- A file containing canonicalized addresses.  Default: stdin.  To resvolve addresses in
				-- more than one file use: cat file-1 ... | add_geo_to_addresses.sh ...

	example:

		If the file addrs.nogeo.20160301.tsv contains canonicalized addresses intended for adding lat/lng to the
		destination address, use this bash command:

			add_geo_to_addresses.sh -at dst addrs.nogeo.20160301.tsv > addrs.geo.20160301.tsv 2> addrs.geo.20160301.errs

scripts/chk_1_address.sh:	(called by chk_all_addresses.sh)

	This script is used to investigate why an address was not found.  The suspect address, as a command line argument is
	submitted to opencagedata.com to get its lat/lng.  opencagedata.com returns a list of its best matches to the query with
	each match preceded by its score.  This script prints this list after first printing information that shows the origin
	of the suspect address: the actual dash line from a "run file" that used this address, the suspect address and the query
	address, ie the address sent to opencagedata.com.

	usage:

		./chk_1_address.sh [ - help ] [ -dh doordash-home ] -at { src | dst } -m month addr

	arguments:

		-help		-- print the usage message. Default: false.
		-dh doordash-home
				-- The base doordash directory.  Data to be checked must be in a "runs-file" in $DD_HOME/data.
				-- Default: the value of $DD_HOME. If DD_HOME is not defined, you must set this value on the
				-- command line.
		-at { src | dst }
				-- Select the address type to check. Use -at src to indicate that the addr argument is a 
				-- source address or -at dst to indicate it's a destination address. Default: none.
		-m month	-- The month of the "runs-file" that contains this address.  The format of month is YYYYMMDD.
				-- This is needed so the original dash can be examined and in some cases fixed.
		addr		-- the address to check. Since the address will contain spaces, it must be quoted.

	example:

		./chk_1_address.sh -dh ~/doordash -m 20160301 -at src "Tommy Thai, 1482 West El Camino Real, MV"

scripts/chk_all_addresses.sh:

	This script is used to check the addresses in an "errs" file (addrs.geo.YYYYMMDD.errs) that was created by a call to
	add_geo_to_addresses.sh.  This script parses the entries in the errs file and for each address that opencagedata.com
	could not find a lat/lng, parses the error report for the information required to call ./chk_1_address.sh to get 
	detailed information of why the call to opencagedata.com failed.
	
	usage:

		./chk_all_addresses.sh [ -help ] [ -dh doordash-home ] error-file

	arguments

		-help		-- print the usage message.  Default: false.
		-dh doordash-home
				-- The base doordash directory.  Data to be checked must be in a "runs-file" in $DD_HOME/data.
				-- Default: the value of $DD_HOME.  If DD_HOME is not defined, you must set thie value on the
				-- command line.
		error-file	-- The error file created by add_geo_to_addresses.sh to check.

	example:

		./chk_all_addresses.sh -dh ~/doordash addrs.geo.20160301.errs

scripts/collect_addresses.sh:

	This script is used collect and count the number of addresses in geo file (addrs.geo.YYYYMMDD.tsv) and write the results
	to stdout.  At some point, the addresses from the individual sourse and destination addresses will be used to check if
	an address in a runs-file needs to be submitted to opencagedata.com to get its lat/lng.

	usage:

		./collect_addrs.sh [ -help ] -at { src | dst } [ addr-geo-file ]

	arguments:
		-help		-- print the usage message.  Default: false.
		-at { src | dst }
				-- Select the address type to collect. Use -at src to collect and count source addresses or
				-- -at dst to collect and count destination addresses.  Default: none.
		addr-geo-file	-- A file containing the addresses w/latlng to collect.  To collect addresses from more than
				-- one geo file, cat them together and then pipe the result into ./collect_addrs.sh

	example:

		cat addrs.geo.*.tsv | ./collect_addrs -at src > out-file

scripts/combine_pay_and_addr.sh:

	This script combines pay data and location lat/lng info.  The data can be colored by average pay/location and
	displayed on a map, possibly revealing dash source/destinations that pay well/poorly.

	Adding lat/lng to addresses is slow, so addresses with lat/lng are collected into two files.  The file src.addrs
	holds resolved source addresses and the file dst.addrs holds destination addresses. These files are located in
	$DD_HOME/maps, where DD_HOME is a symbol that points to the root of the doordash file hierarchy.  The command
	argument -at { src | dst } is used to select whether source (-at src) or destination (-at dst) locations will be
	used.

	Pay information is taken from $DD_HOME/data/breakdownofpay.20150904.tsv.  Pay information is on a per shift not 
	per dash basis and includes the number of dashes/shift and the pay/shift.  These are combined as

		dash-rate = (pay/shift) / (dashes/shift)

	which is the average rate for all dashes in a shift.

	usage:

		./combine_pay_and_addr.sh [ -help ] [ -dh doordash-home ] -at { src | dst } [ runs-file ]

	arguments:
		-help		-- print the usage message.  Default: false.
		-dh doordash-home
				-- The base doordash directory.  Data to be checked must be in a "runs-file" in $DD_HOME/data.
				-- Default: the value of $DD_HOME.  If DD_HOME is not defined, you must set this value on the
				-- command line.
		-at { src | dst }
				-- Select the address type to analyze.
		runs-file	--

scripts/combine_time_and_addr.sh:

	This script combines delivery time and location lat/lng info.  The data can be colored by average delivery time/location
	and displayed on a map, possibly revealiing dash source/destinations are take a long/short delievery time.

	        Adding lat/lng to addresses is slow, so addresses with lat/lng are collected into two files.  The file src.addrs
        holds resolved source addresses and the file dst.addrs holds destination addresses. These files are located in
        $DD_HOME/maps, where DD_HOME is a symbol that points to the root of the doordash file hierarchy.  The command
        argument -at { src | dst } is used to select whether source (-at src) or destination (-at dst) locations will be
        used.

        Pay information is taken from $DD_HOME/data/breakdownofpay.20150904.tsv.  Pay information is on a per shift not
        per dash basis and includes the number of dashes/shift and the pay/shift.  These are combined as

                dash-delievery-time = (time/shift) / (dashes/shift)

        which is the average dash-delivery-time for all dashes in a shift.

        usage:

		./combine_time_and_addr.sh [ -help ] [ -dh doordash-home ] -at { src | dst } [ runs-file ]

	arguments:
		-help		-- print the usage message.  Default: false.
		-dh doordash-home
				-- The base doordash directory.  Data to be checked must be in a "runs-file" in $DD_HOME/data.
				-- Default: the value of $DD_HOME.  If DD_HOME is not defined, you must set this value on the
				-- command line.
		-at { src | dst }
				-- Select the address type to analyze.
		runs-file	--

scripts/fmt_geo_errors.sh:

scripts/get_actual_hours.sh:

scripts/get_addresses.sh:

scripts/get_job_times.sh:

scripts/get_latlong.sh:

scripts/get_new_sources.sh:

scripts/get_pay_data.sh:

scripts/get_src_times.sh:

scripts/mk_dash_summary.sh:

scripts/mk_dash_totals.sh:

scripts/mk_geojson.sh:

scripts/mk_map.sh:

scripts/mk_map_data.sh:

scripts/mk_pay_summary.sh:

scripts/plot_pay_rates.sh:

scripts/plot_src_info.sh:
